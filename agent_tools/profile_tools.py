# agent_tools/profile_tools.py

import json
from openai import OpenAI
import os
from dotenv import load_dotenv

load_dotenv()
client = OpenAI()

session_profile = {}

# --- OpenAI funkcionalita pro extrakci profilu ---

functions = [
    {
        "name": "uloz_profil",
        "description": "Z√≠sk√° jm√©no, vƒõk a obl√≠ben√© zv√≠≈ôe od d√≠tƒõte.",
        "parameters": {
            "type": "object",
            "properties": {
                "jm√©no": {"type": "string", "description": "Jm√©no d√≠tƒõte"},
                "vƒõk": {"type": "integer", "description": "Vƒõk d√≠tƒõte"},
                "zv√≠≈ôe": {"type": "string", "description": "Obl√≠ben√© zv√≠≈ôe"}
            },
            "required": []
        }
    },
    {
        "name": "uloz_zvire_tema",
        "description": "Urƒç√≠ zv√≠≈ôe, kter√© je hlavn√≠m t√©matem vƒõty nebo ot√°zky d√≠tƒõte.",
        "parameters": {
            "type": "object",
            "properties": {
                "zv√≠≈ôe": {
                    "type": "string",
                    "description": "Zv√≠≈ôe, o kter√©m d√≠tƒõ mluv√≠ (p≈ôesnƒõ dle katalogu Zoo Praha)"
                }
            },
            "required": ["zv√≠≈ôe"]
        }
    }
]

# --- Extrakce profilu ---
def extract_profile_via_gpt(user_input):
    try:
        response = client.chat.completions.create(
            model="gpt-4-0613",
            messages=[{"role": "user", "content": user_input}],
            functions=functions,
            function_call={"name": "uloz_profil"}
        )
        arguments = response.choices[0].message.function_call.arguments
        data = json.loads(arguments)
        session_profile.update(data)
        print("üéØ GPT PROFIL:", session_profile)
    except Exception as e:
        print("‚ö†Ô∏è Nepoda≈ôilo se extrahovat profil:", e)

# --- Extrakce t√©matu zv√≠≈ôete ---
def extract_animal_topic(user_input):
    try:
        system_message = {
            "role": "system",
            "content": (
                "Jsi chytr√Ω asistent pro dƒõti. M√°≈° za √∫kol detekovat, o jak√©m zv√≠≈ôeti d√≠tƒõ mluv√≠, "
                "ale pouze tehdy, kdy≈æ d√≠tƒõ zm√≠n√≠ nov√© konkr√©tn√≠ zv√≠≈ôe. "
                "Pokud d√≠tƒõ navazuje na p≈ôedchoz√≠ zv√≠≈ôe a ≈æ√°dn√© jin√© nejmenuje, nic nevracej a nech zv√≠≈ôe nezmƒõnƒõn√©. "
                "Pou≈æij funkci pouze pokud je z≈ôejm√° zmƒõna t√©matu."
            )
        }

        response = client.chat.completions.create(
            model="gpt-4-0613",
            messages=[
                system_message,
                {"role": "user", "content": user_input}
            ],
            functions=functions,
            function_call="auto"
        )

        choice = response.choices[0].message
        if choice.function_call:
            arguments = choice.function_call.arguments
            data = json.loads(arguments)
            zvire = data.get("zv√≠≈ôe")
            print("ü¶Å GPT ZV√ç≈òE:", zvire)
            return zvire

        print("üì≠ GPT nezvolilo ≈æ√°dn√© nov√© zv√≠≈ôe ‚Äì ponech√°me p≈ôedchoz√≠.")
        return None

    except Exception as e:
        print("‚ö†Ô∏è Chyba p≈ôi extrakci zv√≠≈ôete:", e)
        return None
